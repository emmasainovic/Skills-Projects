{"cells":[{"cell_type":"markdown","metadata":{"id":"r9KDrDWd6C5u"},"source":["# Exam 2: Regressions and Predictive Models\n","\n","## 00. Instructions\n","\n","These data represent information about almost every country from the year 2010. The data are taken from the [Fragile States Index](https://fragilestatesindex.org/indicators/), which measures 12 risk factors for the outbreak of violent conflict and the [Targeted Mass Killing (TMK)](https://politicsir.cass.anu.edu.au/about-targeted-mass-killing-dataset) dataset, which tracks mass atrocities performed against specific groups, generally by governments. Check the first link for information about the indicators. The TMK columns were added by your instructor, and indicate:\n","* **next5** Did a targeted mass killing occur in this country in the next 5 years?\n","* **next10** Did a targeted mass killing occur in the next 10 years?\n","* **previous65** Has a targeted mass killing occured from 1946-2010?\n","\n","In addition:\n","1. For every data visualization you make, add a proper description on the axes. Even if the variable name isn't terrible, explicitly add them. This is worth 1 point per axis per problem!\n","2. For each question asking you to make a calculation, you must add a comment or a markdown cell explicitly answering the question. R output alone is insufficient.\n","\n","## 0. Load Libraries\n","\n","(a) Install and load whichever libraries you like. Don't load libraries elswhere on the exam."]},{"cell_type":"code","source":["# Basic working with data libraries\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np\n","\n","# Library including linear/logistic regression\n","import statsmodels.api as sm\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.ensemble import RandomForestRegressor\n","\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import mean_squared_error, r2_score"],"metadata":{"id":"2e3635Ju1_Gi","executionInfo":{"status":"ok","timestamp":1733459759334,"user_tz":300,"elapsed":123,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}}},"execution_count":175,"outputs":[]},{"cell_type":"markdown","source":["## 1. Short Questions on Predictive Modelling (5 pts ea = 20 pts)\n","\n","Of the models we've learned in class: linear regression, logistic regression,  decision trees, or a random forest, would you use for each of the scenarios below? More than one answer may be appropriate (however you must recommend only one), and answers may be used more than once.\n","\n","You may include up to one sentence of reasoning, but this will only be used for partial credit. If you pick the right answer but your reasoning is terrible, it will be used against you.\n","\n","##### (a) Knee Replacement\n","You are studying a situation with three patient outcomes for patients with knee replacement surgery: full recovery of leg usage, partial recovery, and patient requires the use of a walking aid during long stretches of walking or standing. You have observables that you can use in your model like: how long of bed rest they were on after surgery, how frequent and how long of physical therapy sessions they have during recovery, their BMI, how much weight they could lift in a squat before surgery, and so on.\n","\n","You want to predict which outcome patients have, so you can make potential recommendations to improve recovery (e.g. \"you should stay in bed an extra week after the surgery\"). In addition, you want to be able to explain to them *why* you're making this choice. What model would you use?"],"metadata":{"id":"6nXwPkTA4zls"}},{"cell_type":"code","source":["'''\n","A decision tree would be an appropriate model in this scenario because a prediction of the outcome of a patient recovery is being\n","made with a series of yes or no questions, which lead to only 3 possible outcomes, a finite number, so, someone looking at a decision tree\n","can easily predict what the most likely outcome of their surgery will be by answering the questions on the tree and moving down the branches that\n","correspond to the answer given.\n","'''"],"metadata":{"id":"VUBArura4-sb","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1733459759448,"user_tz":300,"elapsed":3,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"3a68b557-dfeb-4536-9978-ab879e94c970"},"execution_count":176,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nA decision tree would be an appropriate model in this scenario because a prediction of the outcome of a patient recovery is being\\nmade with a series of yes or no questions, which lead to only 3 possible outcomes, a finite number, so, someone looking at a decision tree\\ncan easily predict what the most likely outcome of their surgery will be by answering the questions on the tree and moving down the branches that\\ncorrespond to the answer given.\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":176}]},{"cell_type":"markdown","metadata":{"id":"8EMMAziXBPZy"},"source":["##### (b) Housing Market Prediction\n","\n","You represent an investment group that wants to buy up inexpensive real estate, and are building a model to predict how much houses are going to sell for. You can then compare that to listing prices and make appropriate offers. You have knowledge of things like: the lot size, number of bedrooms, number of bathrooms, last sale price, last sale year, school district, and so on. The usual things you can see about a house.\n","\n","Your goal is to get as precise a prediction on the housing price as possible. You do not care why houses cost what they do, only that you can find inexpensive ones for a given lot size and location. What model would you use?"]},{"cell_type":"code","source":["'''\n","A linear regression model would be appropriate in this scenario because the variables listed can be used as independent variables,\n","because they have fixed numbers as their values, in order to predict a value for the dependent variable, the price of a house.\n","'''"],"metadata":{"id":"_YsPqNY9zyTm","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1733459759603,"user_tz":300,"elapsed":157,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"7568e762-967a-448d-f916-2af1737ed4a7"},"execution_count":177,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nA linear regression model would be appropriate in this scenario because the variables listed can be used as independent variables,\\nbecause they have fixed numbers as their values, in order to predict a value for the dependent variable, the price of a house.\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":177}]},{"cell_type":"markdown","metadata":{"id":"51Vlg1G9BPZz"},"source":["##### (c) Mushroom Deadliness\n","\n","You're trying to help people who wish to forage for mushrooms find safe mushrooms based on their observable qualities, which may include color, smell, shape, and so on.\n","\n","They won't be bringing a computer out into the forest with them, but will need to memorize exactly how it works so they can make decisions on the spot. Assuming any model you build will have 100% accuracy, which would be best for foragers?"]},{"cell_type":"code","source":["'''\n","A decision tree would be an acurate model for predicting which mushrooms are safe to forage because the variables can have binary\n","answers to them depending on how they are stated (for example, the colors can vary, however, you could find out which mushroom color is typically poisonous,\n","you could state in the decision tree that red mushrooms are typically poisonous, so ask \"is the mushroom red?\" and move down the branches depending on the answer),\n","and also because it is a type of model that they will need to memorize, which should be relatively simple with a decision tree, especially compared to the other models.\n","'''"],"metadata":{"id":"Wxmoh7vKz1wR","colab":{"base_uri":"https://localhost:8080/","height":70},"executionInfo":{"status":"ok","timestamp":1733459759603,"user_tz":300,"elapsed":3,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"c02065e3-4cca-4435-8ce3-74754dfe5db5"},"execution_count":178,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nA decision tree would be an acurate model for predicting which mushrooms are safe to forage because the variables can have binary\\nanswers to them depending on how they are stated (for example, the colors can vary, however, you could find out which mushroom color is typically poisonous,\\nyou could state in the decision tree that red mushrooms are typically poisonous, so ask \"is the mushroom red?\" and move down the branches depending on the answer),\\nand also because it is a type of model that they will need to memorize, which should be relatively simple with a decision tree, especially compared to the other models.\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":178}]},{"cell_type":"markdown","source":["##### (d) Exam Scores\n","\n","The faculty in the psychology department want to be able to predict, based on data from early in the semester, how well students will perform on exams. Ideally, they want to identify certain assignments, quizzes, prior coursework, and study habits as important early indicators.\n","\n","Here, the focus is not on getting a model which perfectly predicts exam scores, but does an acceptable job while---most importantly---telling you what the indicators of success and failure are, and exactly how each contributes to your prediction. What model should they use?"],"metadata":{"id":"VBlxczTOR2iD"}},{"cell_type":"code","source":["'''\n","A logistic model would accurately predict whether or not a student will pass an exam based on their prior work. A logistic regression model\n","does a good job at finding the relationship between multiple independent variables and a dependent variable, which is the exam score in this\n","case, and we can analyze the coefficient estimates to determine which factors relate passing or failing grades.\n","'''"],"metadata":{"id":"X6oSbQW45zeA","colab":{"base_uri":"https://localhost:8080/","height":52},"executionInfo":{"status":"ok","timestamp":1733459759603,"user_tz":300,"elapsed":2,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"13ec4ddd-4864-42db-c938-b27953fd6c41"},"execution_count":179,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'\\nA logistic model would accurately predict whether or not a student will pass an exam based on their prior work. A logistic regression model\\ndoes a good job at finding the relationship between multiple independent variables and a dependent variable, which is the exam score in this\\ncase, and we can analyze the coefficient estimates to determine which factors relate passing or failing grades.\\n'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":179}]},{"cell_type":"markdown","source":["## 2. Regression (25 pts)\n","\n","(0) Load in the [dataset found at this link](https://raw.githubusercontent.com/Greg-Hallenbeck/class-datasets/main/datasets/fsi-tmk-un.csv) into a variable called `fsi`.\n"],"metadata":{"id":"_Mfwp_9VKp_7"}},{"cell_type":"code","source":["fsi = pd.read_csv(\"https://raw.githubusercontent.com/Greg-Hallenbeck/class-datasets/main/datasets/fsi-tmk-un.csv\")\n","fsi.dropna()\n","fsi"],"metadata":{"id":"Xjc-Y-4C55Eo","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1733459759809,"user_tz":300,"elapsed":208,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"50a2d4ae-df5d-4e45-f999-f1d624d67106"},"execution_count":180,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 Country iso3name           region        continent  year  \\\n","0            Afghanistan      AFG       South Asia             Asia  2010   \n","1                Albania      ALB  Southern Europe           Europe  2010   \n","2                Algeria      DZA  Northern Africa           Africa  2010   \n","3                 Angola      AGO    Middle Africa           Africa  2010   \n","4    Antigua and Barbuda      ATG        Caribbean  Central America  2010   \n","..                   ...      ...              ...              ...   ...   \n","172            Venezuela      VEN    South America    South America  2010   \n","173              Vietnam      VNM   Southeast Asia             Asia  2010   \n","174                Yemen      YEM     Western Asia             Asia  2010   \n","175               Zambia      ZMB   Eastern Africa           Africa  2010   \n","176             Zimbabwe      ZWE   Eastern Africa           Africa  2010   \n","\n","      rank  total   c1   c2   c3  ...   e3    p1   p2   p3   s1   s2    x1  \\\n","0      6th  109.3  9.7  9.4  9.7  ...  7.2  10.0  8.9  9.2  9.5  9.2  10.0   \n","1    121st   67.1  5.4  6.0  4.9  ...  7.1   6.8  5.6  5.3  5.9  2.8   5.5   \n","2     71st   81.3  7.5  6.8  8.2  ...  6.1   7.5  6.5  7.6  6.7  6.5   5.7   \n","3     59th   83.7  5.9  6.8  5.9  ...  5.6   8.1  8.0  7.3  8.4  6.9   6.7   \n","4    127th   60.9  4.6  4.0  4.5  ...  7.3   5.3  4.6  4.7  4.7  3.4   6.2   \n","..     ...    ...  ...  ...  ...  ...  ...   ...  ...  ...  ...  ...   ...   \n","172   82nd   78.7  6.7  7.5  6.8  ...  6.7   7.2  6.1  7.2  6.3  5.1   5.7   \n","173   95th   76.6  6.0  7.0  5.3  ...  5.9   7.3  6.4  7.3  6.9  5.2   6.2   \n","174   15th  100.0  8.9  9.2  8.2  ...  7.2   8.7  8.6  8.0  8.6  8.3   7.8   \n","175   56th   83.9  5.0  6.1  5.4  ...  7.1   7.5  8.0  5.9  9.0  7.3   7.3   \n","176    4th  110.2  9.2  9.5  8.8  ...  9.7   9.6  9.4  9.5  9.4  8.6   7.5   \n","\n","     last65  next5 next10  \n","0       Yes     No     No  \n","1        No     No     No  \n","2       Yes     No     No  \n","3       Yes     No     No  \n","4        No     No     No  \n","..      ...    ...    ...  \n","172      No     No     No  \n","173     Yes     No     No  \n","174      No     No     No  \n","175      No     No     No  \n","176     Yes     No     No  \n","\n","[177 rows x 22 columns]"],"text/html":["\n","  <div id=\"df-6c5e00d9-8e3a-4f99-9313-d2e27c11857b\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country</th>\n","      <th>iso3name</th>\n","      <th>region</th>\n","      <th>continent</th>\n","      <th>year</th>\n","      <th>rank</th>\n","      <th>total</th>\n","      <th>c1</th>\n","      <th>c2</th>\n","      <th>c3</th>\n","      <th>...</th>\n","      <th>e3</th>\n","      <th>p1</th>\n","      <th>p2</th>\n","      <th>p3</th>\n","      <th>s1</th>\n","      <th>s2</th>\n","      <th>x1</th>\n","      <th>last65</th>\n","      <th>next5</th>\n","      <th>next10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Afghanistan</td>\n","      <td>AFG</td>\n","      <td>South Asia</td>\n","      <td>Asia</td>\n","      <td>2010</td>\n","      <td>6th</td>\n","      <td>109.3</td>\n","      <td>9.7</td>\n","      <td>9.4</td>\n","      <td>9.7</td>\n","      <td>...</td>\n","      <td>7.2</td>\n","      <td>10.0</td>\n","      <td>8.9</td>\n","      <td>9.2</td>\n","      <td>9.5</td>\n","      <td>9.2</td>\n","      <td>10.0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Albania</td>\n","      <td>ALB</td>\n","      <td>Southern Europe</td>\n","      <td>Europe</td>\n","      <td>2010</td>\n","      <td>121st</td>\n","      <td>67.1</td>\n","      <td>5.4</td>\n","      <td>6.0</td>\n","      <td>4.9</td>\n","      <td>...</td>\n","      <td>7.1</td>\n","      <td>6.8</td>\n","      <td>5.6</td>\n","      <td>5.3</td>\n","      <td>5.9</td>\n","      <td>2.8</td>\n","      <td>5.5</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Algeria</td>\n","      <td>DZA</td>\n","      <td>Northern Africa</td>\n","      <td>Africa</td>\n","      <td>2010</td>\n","      <td>71st</td>\n","      <td>81.3</td>\n","      <td>7.5</td>\n","      <td>6.8</td>\n","      <td>8.2</td>\n","      <td>...</td>\n","      <td>6.1</td>\n","      <td>7.5</td>\n","      <td>6.5</td>\n","      <td>7.6</td>\n","      <td>6.7</td>\n","      <td>6.5</td>\n","      <td>5.7</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Angola</td>\n","      <td>AGO</td>\n","      <td>Middle Africa</td>\n","      <td>Africa</td>\n","      <td>2010</td>\n","      <td>59th</td>\n","      <td>83.7</td>\n","      <td>5.9</td>\n","      <td>6.8</td>\n","      <td>5.9</td>\n","      <td>...</td>\n","      <td>5.6</td>\n","      <td>8.1</td>\n","      <td>8.0</td>\n","      <td>7.3</td>\n","      <td>8.4</td>\n","      <td>6.9</td>\n","      <td>6.7</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Antigua and Barbuda</td>\n","      <td>ATG</td>\n","      <td>Caribbean</td>\n","      <td>Central America</td>\n","      <td>2010</td>\n","      <td>127th</td>\n","      <td>60.9</td>\n","      <td>4.6</td>\n","      <td>4.0</td>\n","      <td>4.5</td>\n","      <td>...</td>\n","      <td>7.3</td>\n","      <td>5.3</td>\n","      <td>4.6</td>\n","      <td>4.7</td>\n","      <td>4.7</td>\n","      <td>3.4</td>\n","      <td>6.2</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>172</th>\n","      <td>Venezuela</td>\n","      <td>VEN</td>\n","      <td>South America</td>\n","      <td>South America</td>\n","      <td>2010</td>\n","      <td>82nd</td>\n","      <td>78.7</td>\n","      <td>6.7</td>\n","      <td>7.5</td>\n","      <td>6.8</td>\n","      <td>...</td>\n","      <td>6.7</td>\n","      <td>7.2</td>\n","      <td>6.1</td>\n","      <td>7.2</td>\n","      <td>6.3</td>\n","      <td>5.1</td>\n","      <td>5.7</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>173</th>\n","      <td>Vietnam</td>\n","      <td>VNM</td>\n","      <td>Southeast Asia</td>\n","      <td>Asia</td>\n","      <td>2010</td>\n","      <td>95th</td>\n","      <td>76.6</td>\n","      <td>6.0</td>\n","      <td>7.0</td>\n","      <td>5.3</td>\n","      <td>...</td>\n","      <td>5.9</td>\n","      <td>7.3</td>\n","      <td>6.4</td>\n","      <td>7.3</td>\n","      <td>6.9</td>\n","      <td>5.2</td>\n","      <td>6.2</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>174</th>\n","      <td>Yemen</td>\n","      <td>YEM</td>\n","      <td>Western Asia</td>\n","      <td>Asia</td>\n","      <td>2010</td>\n","      <td>15th</td>\n","      <td>100.0</td>\n","      <td>8.9</td>\n","      <td>9.2</td>\n","      <td>8.2</td>\n","      <td>...</td>\n","      <td>7.2</td>\n","      <td>8.7</td>\n","      <td>8.6</td>\n","      <td>8.0</td>\n","      <td>8.6</td>\n","      <td>8.3</td>\n","      <td>7.8</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>175</th>\n","      <td>Zambia</td>\n","      <td>ZMB</td>\n","      <td>Eastern Africa</td>\n","      <td>Africa</td>\n","      <td>2010</td>\n","      <td>56th</td>\n","      <td>83.9</td>\n","      <td>5.0</td>\n","      <td>6.1</td>\n","      <td>5.4</td>\n","      <td>...</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>8.0</td>\n","      <td>5.9</td>\n","      <td>9.0</td>\n","      <td>7.3</td>\n","      <td>7.3</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>176</th>\n","      <td>Zimbabwe</td>\n","      <td>ZWE</td>\n","      <td>Eastern Africa</td>\n","      <td>Africa</td>\n","      <td>2010</td>\n","      <td>4th</td>\n","      <td>110.2</td>\n","      <td>9.2</td>\n","      <td>9.5</td>\n","      <td>8.8</td>\n","      <td>...</td>\n","      <td>9.7</td>\n","      <td>9.6</td>\n","      <td>9.4</td>\n","      <td>9.5</td>\n","      <td>9.4</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>177 rows × 22 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-6c5e00d9-8e3a-4f99-9313-d2e27c11857b')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-6c5e00d9-8e3a-4f99-9313-d2e27c11857b button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-6c5e00d9-8e3a-4f99-9313-d2e27c11857b');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-08587cb2-fc74-4fb0-a3e7-c2fda8541c9a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-08587cb2-fc74-4fb0-a3e7-c2fda8541c9a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-08587cb2-fc74-4fb0-a3e7-c2fda8541c9a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_af4483f2-cf04-4aac-bb67-d81b0f02958b\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('fsi')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_af4483f2-cf04-4aac-bb67-d81b0f02958b button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('fsi');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"fsi"}},"metadata":{},"execution_count":180}]},{"cell_type":"markdown","source":["\n","\n","\n","(a) Build a model predicting x1, the measure of external intervention, from all other variables which are reasonable to include. Use a model which will maximuize your ability to interpret how each variable contributes to the prediction. (10 pts)"],"metadata":{"id":"XKajWXA347Zb"}},{"cell_type":"code","source":["drop = fsi[[\"iso3name\",\"continent\",\"rank\"]]\n","clean_fsi = fsi.drop(columns=drop, axis=1)\n","clean_fsi\n"],"metadata":{"id":"4FqsDgdOFWEi","colab":{"base_uri":"https://localhost:8080/","height":423},"executionInfo":{"status":"ok","timestamp":1733459759809,"user_tz":300,"elapsed":3,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"73d074e9-45b7-4177-aff9-58bfec96a4fd"},"execution_count":181,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                 Country           region  year  total   c1   c2   c3   e1  \\\n","0            Afghanistan       South Asia  2010  109.3  9.7  9.4  9.7  8.3   \n","1                Albania  Southern Europe  2010   67.1  5.4  6.0  4.9  6.1   \n","2                Algeria  Northern Africa  2010   81.3  7.5  6.8  8.2  5.1   \n","3                 Angola    Middle Africa  2010   83.7  5.9  6.8  5.9  5.0   \n","4    Antigua and Barbuda        Caribbean  2010   60.9  4.6  4.0  4.5  5.5   \n","..                   ...              ...   ...    ...  ...  ...  ...  ...   \n","172            Venezuela    South America  2010   78.7  6.7  7.5  6.8  5.8   \n","173              Vietnam   Southeast Asia  2010   76.6  6.0  7.0  5.3  6.6   \n","174                Yemen     Western Asia  2010  100.0  8.9  9.2  8.2  7.9   \n","175               Zambia   Eastern Africa  2010   83.9  5.0  6.1  5.4  8.0   \n","176             Zimbabwe   Eastern Africa  2010  110.2  9.2  9.5  8.8  9.6   \n","\n","      e2   e3    p1   p2   p3   s1   s2    x1 last65 next5 next10  \n","0    8.2  7.2  10.0  8.9  9.2  9.5  9.2  10.0    Yes    No     No  \n","1    5.7  7.1   6.8  5.6  5.3  5.9  2.8   5.5     No    No     No  \n","2    7.1  6.1   7.5  6.5  7.6  6.7  6.5   5.7    Yes    No     No  \n","3    9.1  5.6   8.1  8.0  7.3  8.4  6.9   6.7    Yes    No     No  \n","4    6.1  7.3   5.3  4.6  4.7  4.7  3.4   6.2     No    No     No  \n","..   ...  ...   ...  ...  ...  ...  ...   ...    ...   ...    ...  \n","172  7.6  6.7   7.2  6.1  7.2  6.3  5.1   5.7     No    No     No  \n","173  6.5  5.9   7.3  6.4  7.3  6.9  5.2   6.2    Yes    No     No  \n","174  8.6  7.2   8.7  8.6  8.0  8.6  8.3   7.8     No    No     No  \n","175  7.3  7.1   7.5  8.0  5.9  9.0  7.3   7.3     No    No     No  \n","176  9.4  9.7   9.6  9.4  9.5  9.4  8.6   7.5    Yes    No     No  \n","\n","[177 rows x 19 columns]"],"text/html":["\n","  <div id=\"df-c9617211-e3e2-4a38-871d-8beefc856b5e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Country</th>\n","      <th>region</th>\n","      <th>year</th>\n","      <th>total</th>\n","      <th>c1</th>\n","      <th>c2</th>\n","      <th>c3</th>\n","      <th>e1</th>\n","      <th>e2</th>\n","      <th>e3</th>\n","      <th>p1</th>\n","      <th>p2</th>\n","      <th>p3</th>\n","      <th>s1</th>\n","      <th>s2</th>\n","      <th>x1</th>\n","      <th>last65</th>\n","      <th>next5</th>\n","      <th>next10</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Afghanistan</td>\n","      <td>South Asia</td>\n","      <td>2010</td>\n","      <td>109.3</td>\n","      <td>9.7</td>\n","      <td>9.4</td>\n","      <td>9.7</td>\n","      <td>8.3</td>\n","      <td>8.2</td>\n","      <td>7.2</td>\n","      <td>10.0</td>\n","      <td>8.9</td>\n","      <td>9.2</td>\n","      <td>9.5</td>\n","      <td>9.2</td>\n","      <td>10.0</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Albania</td>\n","      <td>Southern Europe</td>\n","      <td>2010</td>\n","      <td>67.1</td>\n","      <td>5.4</td>\n","      <td>6.0</td>\n","      <td>4.9</td>\n","      <td>6.1</td>\n","      <td>5.7</td>\n","      <td>7.1</td>\n","      <td>6.8</td>\n","      <td>5.6</td>\n","      <td>5.3</td>\n","      <td>5.9</td>\n","      <td>2.8</td>\n","      <td>5.5</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Algeria</td>\n","      <td>Northern Africa</td>\n","      <td>2010</td>\n","      <td>81.3</td>\n","      <td>7.5</td>\n","      <td>6.8</td>\n","      <td>8.2</td>\n","      <td>5.1</td>\n","      <td>7.1</td>\n","      <td>6.1</td>\n","      <td>7.5</td>\n","      <td>6.5</td>\n","      <td>7.6</td>\n","      <td>6.7</td>\n","      <td>6.5</td>\n","      <td>5.7</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Angola</td>\n","      <td>Middle Africa</td>\n","      <td>2010</td>\n","      <td>83.7</td>\n","      <td>5.9</td>\n","      <td>6.8</td>\n","      <td>5.9</td>\n","      <td>5.0</td>\n","      <td>9.1</td>\n","      <td>5.6</td>\n","      <td>8.1</td>\n","      <td>8.0</td>\n","      <td>7.3</td>\n","      <td>8.4</td>\n","      <td>6.9</td>\n","      <td>6.7</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Antigua and Barbuda</td>\n","      <td>Caribbean</td>\n","      <td>2010</td>\n","      <td>60.9</td>\n","      <td>4.6</td>\n","      <td>4.0</td>\n","      <td>4.5</td>\n","      <td>5.5</td>\n","      <td>6.1</td>\n","      <td>7.3</td>\n","      <td>5.3</td>\n","      <td>4.6</td>\n","      <td>4.7</td>\n","      <td>4.7</td>\n","      <td>3.4</td>\n","      <td>6.2</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>172</th>\n","      <td>Venezuela</td>\n","      <td>South America</td>\n","      <td>2010</td>\n","      <td>78.7</td>\n","      <td>6.7</td>\n","      <td>7.5</td>\n","      <td>6.8</td>\n","      <td>5.8</td>\n","      <td>7.6</td>\n","      <td>6.7</td>\n","      <td>7.2</td>\n","      <td>6.1</td>\n","      <td>7.2</td>\n","      <td>6.3</td>\n","      <td>5.1</td>\n","      <td>5.7</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>173</th>\n","      <td>Vietnam</td>\n","      <td>Southeast Asia</td>\n","      <td>2010</td>\n","      <td>76.6</td>\n","      <td>6.0</td>\n","      <td>7.0</td>\n","      <td>5.3</td>\n","      <td>6.6</td>\n","      <td>6.5</td>\n","      <td>5.9</td>\n","      <td>7.3</td>\n","      <td>6.4</td>\n","      <td>7.3</td>\n","      <td>6.9</td>\n","      <td>5.2</td>\n","      <td>6.2</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>174</th>\n","      <td>Yemen</td>\n","      <td>Western Asia</td>\n","      <td>2010</td>\n","      <td>100.0</td>\n","      <td>8.9</td>\n","      <td>9.2</td>\n","      <td>8.2</td>\n","      <td>7.9</td>\n","      <td>8.6</td>\n","      <td>7.2</td>\n","      <td>8.7</td>\n","      <td>8.6</td>\n","      <td>8.0</td>\n","      <td>8.6</td>\n","      <td>8.3</td>\n","      <td>7.8</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>175</th>\n","      <td>Zambia</td>\n","      <td>Eastern Africa</td>\n","      <td>2010</td>\n","      <td>83.9</td>\n","      <td>5.0</td>\n","      <td>6.1</td>\n","      <td>5.4</td>\n","      <td>8.0</td>\n","      <td>7.3</td>\n","      <td>7.1</td>\n","      <td>7.5</td>\n","      <td>8.0</td>\n","      <td>5.9</td>\n","      <td>9.0</td>\n","      <td>7.3</td>\n","      <td>7.3</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","    <tr>\n","      <th>176</th>\n","      <td>Zimbabwe</td>\n","      <td>Eastern Africa</td>\n","      <td>2010</td>\n","      <td>110.2</td>\n","      <td>9.2</td>\n","      <td>9.5</td>\n","      <td>8.8</td>\n","      <td>9.6</td>\n","      <td>9.4</td>\n","      <td>9.7</td>\n","      <td>9.6</td>\n","      <td>9.4</td>\n","      <td>9.5</td>\n","      <td>9.4</td>\n","      <td>8.6</td>\n","      <td>7.5</td>\n","      <td>Yes</td>\n","      <td>No</td>\n","      <td>No</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>177 rows × 19 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9617211-e3e2-4a38-871d-8beefc856b5e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-c9617211-e3e2-4a38-871d-8beefc856b5e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-c9617211-e3e2-4a38-871d-8beefc856b5e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a8cec57d-1238-4a4c-83fd-010e137886d5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a8cec57d-1238-4a4c-83fd-010e137886d5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a8cec57d-1238-4a4c-83fd-010e137886d5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d101363b-1b4b-4db5-899d-9d87fbdf90db\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('clean_fsi')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d101363b-1b4b-4db5-899d-9d87fbdf90db button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('clean_fsi');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"clean_fsi","summary":"{\n  \"name\": \"clean_fsi\",\n  \"rows\": 177,\n  \"fields\": [\n    {\n      \"column\": \"Country\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 177,\n        \"samples\": [\n          \"Bolivia\",\n          \"Denmark\",\n          \"Seychelles\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"region\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"South Asia\",\n          \"Southeast Asia\",\n          \"Western Europe\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"year\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 2010,\n        \"max\": 2010,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          2010\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"total\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23.15073389421554,\n        \"min\": 18.7,\n        \"max\": 114.3,\n        \"num_unique_values\": 157,\n        \"samples\": [\n          67.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"c1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.386140645535662,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 74,\n        \"samples\": [\n          4.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"c2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.4063615451503604,\n        \"min\": 1.0,\n        \"max\": 10.0,\n        \"num_unique_values\": 72,\n        \"samples\": [\n          3.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"c3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.992911326995657,\n        \"min\": 1.0,\n        \"max\": 9.9,\n        \"num_unique_values\": 74,\n        \"samples\": [\n          4.5\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"e1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.725662263171194,\n        \"min\": 2.2,\n        \"max\": 9.6,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          4.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"e2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1.7937729344941857,\n        \"min\": 1.7,\n        \"max\": 9.5,\n        \"num_unique_values\": 63,\n        \"samples\": [\n          8.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"e3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.05122212308997,\n        \"min\": 1.1,\n        \"max\": 9.7,\n        \"num_unique_values\": 67,\n        \"samples\": [\n          2.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3950402709207843,\n        \"min\": 0.7,\n        \"max\": 10.0,\n        \"num_unique_values\": 71,\n        \"samples\": [\n          9.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.3666667118788736,\n        \"min\": 1.1,\n        \"max\": 9.7,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          4.6\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2766214583258026,\n        \"min\": 1.3,\n        \"max\": 9.9,\n        \"num_unique_values\": 71,\n        \"samples\": [\n          7.8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.1003105892070058,\n        \"min\": 0.8,\n        \"max\": 9.9,\n        \"num_unique_values\": 69,\n        \"samples\": [\n          9.4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.2931231072497114,\n        \"min\": 0.9,\n        \"max\": 10.0,\n        \"num_unique_values\": 78,\n        \"samples\": [\n          5.9\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"x1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.164164530494111,\n        \"min\": 0.9,\n        \"max\": 10.0,\n        \"num_unique_values\": 76,\n        \"samples\": [\n          6.2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"last65\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"No\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"next5\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"next10\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Yes\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":181}]},{"cell_type":"code","source":["X = clean_fsi[[\"c1\",\"c1\",\"c2\",\"c3\",\"e1\",\"e2\",\"e3\",\"p1\",\"p2\",\"p3\",\"s1\",\"s2\"]]\n","y = clean_fsi['x1']"],"metadata":{"id":"HJJ-yrJ15-SS","executionInfo":{"status":"ok","timestamp":1733459759809,"user_tz":300,"elapsed":2,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}}},"execution_count":182,"outputs":[]},{"cell_type":"code","source":["X = pd.get_dummies(X, drop_first=True).astype(\"float32\")\n","X.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"0cFLOVog6r4B","executionInfo":{"status":"ok","timestamp":1733459759952,"user_tz":300,"elapsed":145,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"12d7cdd4-5753-4e8c-ebca-1447472515a9"},"execution_count":183,"outputs":[{"output_type":"execute_result","data":{"text/plain":["    c1   c1   c2   c3   e1   e2   e3    p1   p2   p3   s1   s2\n","0  9.7  9.7  9.4  9.7  8.3  8.2  7.2  10.0  8.9  9.2  9.5  9.2\n","1  5.4  5.4  6.0  4.9  6.1  5.7  7.1   6.8  5.6  5.3  5.9  2.8\n","2  7.5  7.5  6.8  8.2  5.1  7.1  6.1   7.5  6.5  7.6  6.7  6.5\n","3  5.9  5.9  6.8  5.9  5.0  9.1  5.6   8.1  8.0  7.3  8.4  6.9\n","4  4.6  4.6  4.0  4.5  5.5  6.1  7.3   5.3  4.6  4.7  4.7  3.4"],"text/html":["\n","  <div id=\"df-30b2db5f-069b-44c3-88ee-41e8fbb7b6dc\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>c1</th>\n","      <th>c1</th>\n","      <th>c2</th>\n","      <th>c3</th>\n","      <th>e1</th>\n","      <th>e2</th>\n","      <th>e3</th>\n","      <th>p1</th>\n","      <th>p2</th>\n","      <th>p3</th>\n","      <th>s1</th>\n","      <th>s2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>9.7</td>\n","      <td>9.7</td>\n","      <td>9.4</td>\n","      <td>9.7</td>\n","      <td>8.3</td>\n","      <td>8.2</td>\n","      <td>7.2</td>\n","      <td>10.0</td>\n","      <td>8.9</td>\n","      <td>9.2</td>\n","      <td>9.5</td>\n","      <td>9.2</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>5.4</td>\n","      <td>5.4</td>\n","      <td>6.0</td>\n","      <td>4.9</td>\n","      <td>6.1</td>\n","      <td>5.7</td>\n","      <td>7.1</td>\n","      <td>6.8</td>\n","      <td>5.6</td>\n","      <td>5.3</td>\n","      <td>5.9</td>\n","      <td>2.8</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7.5</td>\n","      <td>7.5</td>\n","      <td>6.8</td>\n","      <td>8.2</td>\n","      <td>5.1</td>\n","      <td>7.1</td>\n","      <td>6.1</td>\n","      <td>7.5</td>\n","      <td>6.5</td>\n","      <td>7.6</td>\n","      <td>6.7</td>\n","      <td>6.5</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>5.9</td>\n","      <td>5.9</td>\n","      <td>6.8</td>\n","      <td>5.9</td>\n","      <td>5.0</td>\n","      <td>9.1</td>\n","      <td>5.6</td>\n","      <td>8.1</td>\n","      <td>8.0</td>\n","      <td>7.3</td>\n","      <td>8.4</td>\n","      <td>6.9</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4.6</td>\n","      <td>4.6</td>\n","      <td>4.0</td>\n","      <td>4.5</td>\n","      <td>5.5</td>\n","      <td>6.1</td>\n","      <td>7.3</td>\n","      <td>5.3</td>\n","      <td>4.6</td>\n","      <td>4.7</td>\n","      <td>4.7</td>\n","      <td>3.4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-30b2db5f-069b-44c3-88ee-41e8fbb7b6dc')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-30b2db5f-069b-44c3-88ee-41e8fbb7b6dc button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-30b2db5f-069b-44c3-88ee-41e8fbb7b6dc');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a952281f-0894-434d-b91a-71e759463ae4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a952281f-0894-434d-b91a-71e759463ae4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a952281f-0894-434d-b91a-71e759463ae4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X","summary":"{\n  \"name\": \"X\",\n  \"rows\": 177,\n  \"fields\": [\n    {\n      \"column\": \"c1\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 74,\n        \"samples\": [\n          4.599999904632568,\n          2.700000047683716,\n          5.800000190734863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"c1\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 74,\n        \"samples\": [\n          4.599999904632568,\n          2.700000047683716,\n          5.800000190734863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"c2\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 72,\n        \"samples\": [\n          3.200000047683716,\n          6.900000095367432,\n          8.300000190734863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"c3\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 74,\n        \"samples\": [\n          4.5,\n          6.699999809265137,\n          6.199999809265137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"e1\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 63,\n        \"samples\": [\n          4.800000190734863,\n          4.5,\n          8.300000190734863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"e2\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 63,\n        \"samples\": [\n          8.600000381469727,\n          5.0,\n          8.199999809265137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"e3\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 67,\n        \"samples\": [\n          2.200000047683716,\n          5.900000095367432,\n          7.300000190734863\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p1\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 71,\n        \"samples\": [\n          9.0,\n          10.0,\n          5.699999809265137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p2\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 76,\n        \"samples\": [\n          4.599999904632568,\n          3.4000000953674316,\n          4.400000095367432\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"p3\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 71,\n        \"samples\": [\n          7.800000190734863,\n          9.199999809265137,\n          6.099999904632568\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s1\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 69,\n        \"samples\": [\n          9.399999618530273,\n          9.5,\n          0.800000011920929\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"s2\",\n      \"properties\": {\n        \"dtype\": \"float32\",\n        \"num_unique_values\": 78,\n        \"samples\": [\n          5.900000095367432,\n          9.199999809265137,\n          5.699999809265137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":183}]},{"cell_type":"code","source":["X = sm.tools.tools.add_constant(X)\n","model = sm.OLS(y,X).fit()\n","print(model.summary())"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lUT5j8fh7DJy","executionInfo":{"status":"ok","timestamp":1733459759952,"user_tz":300,"elapsed":2,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"1af20ad6-8c4f-469f-9a8a-b719b88da02b"},"execution_count":184,"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:                     x1   R-squared:                       0.808\n","Model:                            OLS   Adj. R-squared:                  0.795\n","Method:                 Least Squares   F-statistic:                     62.95\n","Date:                Fri, 06 Dec 2024   Prob (F-statistic):           3.25e-53\n","Time:                        04:35:59   Log-Likelihood:                -241.46\n","No. Observations:                 177   AIC:                             506.9\n","Df Residuals:                     165   BIC:                             545.0\n","Df Model:                          11                                         \n","Covariance Type:            nonrobust                                         \n","==============================================================================\n","                 coef    std err          t      P>|t|      [0.025      0.975]\n","------------------------------------------------------------------------------\n","const          0.3214      0.408      0.788      0.432      -0.484       1.127\n","c1             0.0863      0.046      1.894      0.060      -0.004       0.176\n","c1             0.0863      0.046      1.894      0.060      -0.004       0.176\n","c2             0.1992      0.098      2.034      0.044       0.006       0.393\n","c3             0.0478      0.092      0.521      0.603      -0.133       0.229\n","e1             0.3926      0.092      4.277      0.000       0.211       0.574\n","e2            -0.2817      0.093     -3.045      0.003      -0.464      -0.099\n","e3             0.1661      0.070      2.361      0.019       0.027       0.305\n","p1             0.3619      0.116      3.128      0.002       0.133       0.590\n","p2            -0.1108      0.120     -0.923      0.357      -0.348       0.126\n","p3            -0.3806      0.098     -3.875      0.000      -0.575      -0.187\n","s1             0.2178      0.123      1.770      0.079      -0.025       0.461\n","s2             0.1764      0.061      2.905      0.004       0.057       0.296\n","==============================================================================\n","Omnibus:                        4.717   Durbin-Watson:                   2.282\n","Prob(Omnibus):                  0.095   Jarque-Bera (JB):                5.848\n","Skew:                           0.135   Prob(JB):                       0.0537\n","Kurtosis:                       3.849   Cond. No.                     4.86e+16\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n","[2] The smallest eigenvalue is 3.56e-29. This might indicate that there are\n","strong multicollinearity problems or that the design matrix is singular.\n"]}]},{"cell_type":"markdown","source":["(b) Choose one variable in your model, and interpret its contribution. How does changing it affect the prediction of `x1`? Keep in mind that *higher* fragility scores and indicators are always *worse*. (5 pts)"],"metadata":{"id":"kSNT_rgzAwc0"}},{"cell_type":"code","source":["sns.regplot(x='p1', y='x1', data = clean_fsi, color = \"grey\", ci=None, line_kws = {\"color\":\"red\"})\n","plt.grid()\n","plt.xlabel('Level of State Legitimacy (x1)')\n","plt.ylabel('Level of External Intervention (p1)')\n","plt.title('Relationship between Level of State Legitimacy &  Level of External Intervention')\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":472},"id":"M9DtYybD80oS","executionInfo":{"status":"ok","timestamp":1733459760225,"user_tz":300,"elapsed":274,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"42711ce7-4643-482c-969c-a1cb2d508c15"},"execution_count":185,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["The graph clearly shows that there is a somewhat strong, positive correlation between the level of external intervention(x1) and the level of state legitimacy(p1). Not only does the graph show this, but the p value on the model above was 0.002, which means that p1 has an incredibly strong impact on x1. Furthermore, if p1 were to change, it would cause x1 to change with it. So if p1 increased, x1 would increase, and if p1 decreased, x1 would decrease with it. So, we can conclude that a state that is very legit will more than likely have a high amount of external intervention."],"metadata":{"id":"rfwDgHbB-9b_"}},{"cell_type":"markdown","source":["(c) Evaluate the accuracy of your model, using residual analysis:\n","* What is the typical error?\n","* Is the model overfit?\n","* Are there problematic trends in the residuals?\n","\n","(10 pts)"],"metadata":{"id":"aCabGNAmA0i_"}},{"cell_type":"code","source":["yhat = model.predict()\n","r = y - yhat\n","np.std(r)"],"metadata":{"id":"C5HnWfRlR2Sp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1733459760390,"user_tz":300,"elapsed":167,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"4249f563-b391-4931-b268-13c598023f4a"},"execution_count":186,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.9466905505707529"]},"metadata":{},"execution_count":186}]},{"cell_type":"markdown","source":["The output in the cell above tells us that the typical error is approximately 0.95."],"metadata":{"id":"crJAcuvyAdO3"}},{"cell_type":"markdown","source":["The R-Squared value of 0.808 tells us that the accuracy of the model based on the data is. This means that the data has around an 80.8% accuracy. This is a decent fit, but could have definitely been better."],"metadata":{"id":"chBuCmaVKF0l"}},{"cell_type":"code","source":["ax = sns.scatterplot(x=yhat, y=r, color = \"grey\")\n","ax.axhline(y=0, color = \"red\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":447},"id":"CZquPgrUK1L2","executionInfo":{"status":"ok","timestamp":1733459760390,"user_tz":300,"elapsed":4,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"1d730001-ba37-4168-9b91-8b78f7cf34dc"},"execution_count":187,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.lines.Line2D at 0x7d11407a2ef0>"]},"metadata":{},"execution_count":187},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["There is no general direction or trend seen by the plots in the graph, nor are they very close together, so there is not a great correlation between the residuals and the models predictions. Therefore, our model did not very accurately represent the correlations in the dataset."],"metadata":{"id":"17eXBHUeLUmg"}},{"cell_type":"markdown","metadata":{"id":"W3yw08FqBPZv"},"source":["## 3. Predict whether a country will have a TMK event. (30 pts)"]},{"cell_type":"markdown","source":["(a) Build a model predicting whether a country will have a targeted mass killing event in the 5 years 2010-2015. You may use any model of interest. (10 pts)"],"metadata":{"id":"2DSyFVSfRGmu"}},{"cell_type":"code","source":["# random forest\n","\n","X = clean_fsi[[\"year\",\"c1\",\"c2\",\"c3\",\"e1\",\"e2\",\"e3\",\"p1\",\"p2\",\"p3\",\"s1\",\"s2\",\"x1\",\"last65\"]]\n","X = pd.get_dummies(X, drop_first=True)\n","\n","y = clean_fsi[\"next5\"]\n","\n","feature_names = X.columns.tolist()\n","\n"],"metadata":{"id":"9G-pS9GW1jWU","executionInfo":{"status":"ok","timestamp":1733459760390,"user_tz":300,"elapsed":2,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}}},"execution_count":188,"outputs":[]},{"cell_type":"code","source":["X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=314159)"],"metadata":{"id":"tVAohze725E0","executionInfo":{"status":"ok","timestamp":1733459760390,"user_tz":300,"elapsed":2,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}}},"execution_count":189,"outputs":[]},{"cell_type":"code","source":["model = RandomForestClassifier().fit(X_train, y_train)"],"metadata":{"id":"lzEeJ7sY3AF1","executionInfo":{"status":"ok","timestamp":1733459760741,"user_tz":300,"elapsed":206,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}}},"execution_count":190,"outputs":[]},{"cell_type":"code","source":["importances = model.feature_importances_\n","feature_imp_df = pd.DataFrame({\n","    'Feature': feature_names,\n","    'Gini Importance': importances\n","})\n","feature_imp_df = feature_imp_df.sort_values('Gini Importance', ascending=False)\n","print(feature_imp_df)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vt18Nu1Q3IlS","executionInfo":{"status":"ok","timestamp":1733459760741,"user_tz":300,"elapsed":2,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"12381c7c-c9ca-47d2-ed61-095450b58042"},"execution_count":191,"outputs":[{"output_type":"stream","name":"stdout","text":["       Feature  Gini Importance\n","3           c3         0.160499\n","9           p3         0.111330\n","12          x1         0.107920\n","1           c1         0.100070\n","4           e1         0.084915\n","2           c2         0.076239\n","5           e2         0.071323\n","8           p2         0.070235\n","6           e3         0.068482\n","10          s1         0.050950\n","11          s2         0.042783\n","7           p1         0.041898\n","13  last65_Yes         0.013356\n","0         year         0.000000\n"]}]},{"cell_type":"code","source":["forest_importances = pd.Series(model.feature_importances_,index=feature_names)\n","forest_importances.sort_values(inplace=True, ascending=True)\n","\n","fig, ax = plt.subplots(figsize=(8, 6))\n","forest_importances.plot.barh(ax=ax, color='pink')\n","ax.set_xlabel(\"Feature Importance\")\n","\n","ax.yaxis.set_ticks_position('left')\n","ax.xaxis.set_ticks_position('bottom')\n","ax.spines['right'].set_visible(False)\n","ax.spines['top'].set_visible(False)\n","\n","fig.tight_layout()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"h9ihId353puj","executionInfo":{"status":"ok","timestamp":1733459761112,"user_tz":300,"elapsed":372,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"a57bce1f-e9d6-44ae-b508-e54ffcab7fb8"},"execution_count":192,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["(b) Evaluate your model: how accurate is it, and is the model overfit? (10 pts)"],"metadata":{"id":"w_eYJ2Y2RJSJ"}},{"cell_type":"code","source":["yhat_train = model.predict(X_train)\n","yhat_test = model.predict(X_test)\n","\n","print(f\"Train Accuracy: {accuracy_score(yhat_train, y_train):.2f}\")\n","print(f\"Test Accuracy:  {accuracy_score(yhat_test, y_test):.2f}\")\n","print(f\"Null Accuracy:  {y_test.value_counts(normalize=True).iloc[0]:.2f}\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"u1y-mJwVsntW","executionInfo":{"status":"ok","timestamp":1733459761113,"user_tz":300,"elapsed":3,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}},"outputId":"6b2d5072-b1eb-4789-c00e-fed82a70ed6d"},"execution_count":193,"outputs":[{"output_type":"stream","name":"stdout","text":["Train Accuracy: 1.00\n","Test Accuracy:  0.91\n","Null Accuracy:  0.91\n"]}]},{"cell_type":"markdown","source":["(c) Name at least 2 variables which your model uses to make predictions. If possible, explain how those variables affect the prediction. (5 pts)\n","\n"],"metadata":{"id":"r9yZCaAkRRqP"}},{"cell_type":"markdown","source":["One of the variables that the model uses to make predictions is c3 which is Group Grievance. This factor describes the division between groups(typically caused by social or political characteristics of the group) and history behind the groups within a country. Group Grievance is a very important factor when it comes to predicting the external intervention of a country.\n","\n","Another variable that the model uses to make the predictions is c1 which is Security Apparatus. According to the FSI website, the security apparatus variable considers the security threats to a country that include things such as bombings, attacks, or rebel movements. This indicator is used  by the model to make predictions on whether or not the country will have external intervention. The higher level of risk a country has to their security, the more likely they are to have external intervention by other countries."],"metadata":{"id":"xyHoHj4yBMEJ"}},{"cell_type":"markdown","source":["(c) Imagine you are in charge of a task force committed to the prevention of targeted mass killing events. Your team is full of diplomats, businesspeople, and so on, with a wide variety of skills. But it's a small task force, and can only really focus on one or two countries each year. In this context, which kind of error would you want to minimize in your model: false positives (your model predicts there will be a TMK event but there isn't), or false negatives (your model predicts there *won't* be an event but there is)? Defend your choice (5 pts)."],"metadata":{"id":"t6EVgJ8rRVlV"}},{"cell_type":"markdown","source":["If I were on this team I would want to minimize the error of a false negative. In the case of the false positive, although there was no mass killing, I think it would be better for my team to be over prepared and there be no casualties. In the case of a false negative, there would be a mass killing and lives would be lost because of a lack of preparation from my team. I would prefer being prepared for a situation that does not happen compared to not being prepared for a situation that has such a high casualty rate and much more serious consequences. So in conclusion, I think because of the consequences of the two errors is what makes me feel that I'd prefer ensuring that the errors on false negatives is handled carefully."],"metadata":{"id":"YqXYdGLrEgap"}},{"cell_type":"markdown","metadata":{"id":"vRnsYDxS6C53"},"source":["## 4. Data Ethics (25 pts total, as noted)"]},{"cell_type":"markdown","metadata":{"id":"9UE6phCK6C53"},"source":["These are short answer questions, not essays. Be clear and concise; answers in the form of bulleted lists are acceptable. Long answers that are correct but contain far too much information may be penalized.\n","\n","Read this article by Buzzfeed from 2017 on [training a machine learning algorithnm to recognize spy planes.](https://www.buzzfeednews.com/article/peteraldhous/hidden-spy-planes) (A PDF version without 1,000 ads can be found on Brightspace.)."]},{"cell_type":"markdown","metadata":{"id":"uxRkNeO36C54"},"source":["(a) The reporters used a random forest model for their investigation. In your own words, why was this model the best fit for their work?\n","(10 pts)"]},{"cell_type":"markdown","source":["A random forest was the best model for them to investigate because of their large amount of factors including \"turning rates, speeds and altitudes flown, the areas of rectangles drawn around each flight path, and the flights’ durations\". On top of the large amount of factors, there were hundreds of planes and aircrafts. The random forest is appropriate because it allowed them to decide which factors of each flight were the most important and doing this with a different type of model would not be as simple to understand."],"metadata":{"id":"UmWSI0uxtJXi"}},{"cell_type":"markdown","metadata":{"id":"tXh6q4jP6C55"},"source":["(b) What variables would you identify as their X and y variables, if you were recreating this model with their data? (2 points)"]},{"cell_type":"markdown","source":["If I were to recreate this model, I would make the indepent variables, X, the planes/aircrafts that they were flying, and the dependent variables, y, would be the factors they used to decide which factors were using such as \"turning rates, speeds and altitudes flown, the areas of rectangles drawn around each flight path, and the flights’ durations\" because this would make it so that we know which factors (from this list) are most important when determining the type of aircraft."],"metadata":{"id":"bhUPMjby0gsH"}},{"cell_type":"markdown","source":["(c) Why did the algorithm incorrectly predict some planes as spy planes? (5 points)"],"metadata":{"id":"fq9JSrbb0h7V"}},{"cell_type":"markdown","source":["The algorithm predicted some planes as spy planes incorrectly because \"The algorithm was not infallible: Among other candidates, it flagged several skydiving operations that circled in a relatively small area, much like a typical surveillance aircraft.\" What they are saying is that some planes have similar traits such as turning rates that could cause some confusion in the algorithm. In this case, turning rates were probably one of the most important traits of determining a plane to be a spy plane."],"metadata":{"id":"I-DzAVZI1CHy"}},{"cell_type":"markdown","source":["(d) Imagine that you have been hired to work on this machine learning algorithm for tracking flight data. In the process, you find that the algorithm has flagged several false positives (identifying planes as potential surviellence planes when they are not). You want to argue for modifying the algorithm before releasing the information. Pick <b>3</b> of the ethical standards we have discussed in this class as the reasoning for why you cannot yet release the model and explain why you would argue for them. (8 points)\n"],"metadata":{"id":"YKC0t9M41C6o"}},{"cell_type":"markdown","source":["## Be Competent and Act with Integrity##\n","I would not release an algorithm knowing that it is not only dishonest but also thoughtless. The program is meant to be taken seriously, and is about helping detect surveillance. It would be pointless to release an algorithm that is not benefiting anyone and could lead to much more serious damage in the future. I would be a very incompetent professional being hired to write this machine learning algorithm and release it knowing that there are issues with it that I am supposed to fix.\n","\n","##Respect and Acknowledge Labor##\n","If I were hired to create a complex code such as this one, I would personally feel disrespected if my work was not taken seriously and my team wanted to release an algorithm of mine that was not accurate 100% of the time. Coding can be very challenging and something that can take years of pratice, so if I were knowledgable enough to create such an algorithm, I'd want it to be as accurate and as helpful as it could be. It would also endanger the labor of those  flying the aircrafts, and put non-surveillance aircrafts at risk because of an error on my end.\n","\n","##Contribute Positively to Society##\n","Releasing an inaccurate algorithm would be unethical because it can harm everyone in society, not just those creating the algorithm or those flying the aircrafts. The people who use the algorithm to identify the aircrafts are caught falsely identifying them, I do not know the risks or consequences for that person. If this person were to, for example, lose their job over this, that could possibly effect their family if they were contributing a large portion of the income, or possibly even harm the firm they work for if they were typically a good employee who made one harmful mistake."],"metadata":{"id":"RlHhkk59xm4v"}},{"cell_type":"markdown","source":["."],"metadata":{"id":"pNEnbXpc4coO"}},{"cell_type":"markdown","metadata":{"id":"hSRPQPwL6C57"},"source":["# Academic Integrity Statement\n","\n","By writing my name in the cell below, I certify that:\n","\n","1. I did not use resources other than:\n","   * the Python notebooks provided by the instructor,\n","   * links provided in this notebook,\n","   * the assigned readings, and\n","   * my own personal notes\n","2. This means that I did not:\n","   * look up anything on Google, ChatGPT, or Stack Overflow, &c.,\n","   * use Google AI in colab\n","   * discuss the content of the exam with *anyone* other than the instructor, or\n","   * do anything that technically doen't break these rules but is against their spirit."]},{"cell_type":"code","execution_count":194,"metadata":{"id":"IjQBvJrQ6C57","executionInfo":{"status":"ok","timestamp":1733459761113,"user_tz":300,"elapsed":2,"user":{"displayName":"Emma Sainovic","userId":"00818293402055231303"}}},"outputs":[],"source":["# Emma Sainovic"]}],"metadata":{"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"colab":{"provenance":[{"file_id":"1E7ZEi-Qexx-t8nXlzebgJ7qa9hwGtCgW","timestamp":1733264725088},{"file_id":"13Z7YakWD5_M0mD_l-gywkxxdVxirhJ4o","timestamp":1732548616176},{"file_id":"11QCltsRWwf5HK0cl809so8eo033vtoaf","timestamp":1731097212419}]}},"nbformat":4,"nbformat_minor":0}